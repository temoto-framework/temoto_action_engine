#include <chrono>
#include <condition_variable>
#include <thread>
#include <class_loader/class_loader.hpp>
#include "ta_example_1/temoto_action.h"

class TaTriggerResultMulti : public TemotoAction
{
public:

// Constructor. REQUIRED BY TEMOTO
TaTriggerResultMulti()
{}

void onInit()
{
  TEMOTO_PRINT_OF("Initializing", getName());
}

// REQUIRED BY TEMOTO
bool onRun()
{
  // Input parameters
  if (count == 0)
  {
    in_results = GET_PARAMETER("results", std::vector<std::string>);
    in_delay = GET_PARAMETER("delay", double);
  }

  /*
   * Sleep until stopped
   */
  if (count == in_results.size())
  {
    std::unique_lock<std::mutex> lock(m);
    cv.wait(lock, [&]{return stop;});
    return true;
  }

  /*
   * Sleep for a determined amount of time
   */
  TEMOTO_PRINT_OF("sleeping for: " + std::to_string(int(in_delay * 1000)) + " s", getName());
  std::this_thread::sleep_for(std::chrono::milliseconds(int(in_delay * 1000)));

  std::string result = in_results.at(count);
  
  TEMOTO_PRINT_OF("triggering a result " + std::to_string(count + 1) + " out of " +
    std::to_string(in_results.size()) + ": " + in_results.at(count), getName());

  count++;

  /*
   * Trigger the result
   */
  if (result == "on_true")
    return true;
  else if (result == "on_false")
    return false;
  else if (result == "on_error")
    throw std::runtime_error("Deliberate error generated by '" + getName() + "'");
  else
    throw std::runtime_error("Unrecognized input '" + result + "'");
}

void onPause()
{
  TEMOTO_PRINT_OF("Pausing", getName());
}

void onContinue()
{
  TEMOTO_PRINT_OF("Continuing", getName());
}

void onStop()
{
  TEMOTO_PRINT_OF("Stopping", getName());
  stop = true;
  cv.notify_all();
}

// Destructor
~TaTriggerResultMulti()
{}

private:

std::vector<std::string> in_results;
double in_delay;
unsigned int count = 0;
std::condition_variable cv;
std::mutex m;
bool stop = false;

}; // TaTriggerResultMulti class

/* REQUIRED BY CLASS LOADER */
CLASS_LOADER_REGISTER_CLASS(TaTriggerResultMulti, ActionBase);
