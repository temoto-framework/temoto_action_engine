
#include "ta_trigger_result_multi/temoto_action.hpp"

#include <chrono>
#include <condition_variable>
#include <thread>

class TaTriggerResultMulti : public TemotoAction
{
public:

TaTriggerResultMulti() // REQUIRED
{
}

void onInit()
{
  TEMOTO_PRINT_OF("Initializing", getName());
}

bool onRun() // REQUIRED
{
  // Input parameters
  if (count == 0)
  {
    in_results = params_in.results;
    in_delay = params_in.delay;
  }

  /*
   * Sleep until stopped
   */
  if (count == in_results.size())
  {
    TEMOTO_PRINT_OF("Trigger count reached, sleeping until stopped", getName());
    std::unique_lock<std::mutex> lock(m);
    cv.wait(lock, [&]{return stop;});
    TEMOTO_PRINT_OF("Woke up after receiving a stop signal", getName());
    return true;
  }

  /*
   * Sleep for a determined amount of time
   */
  TEMOTO_PRINT_OF("sleeping for: " + std::to_string(in_delay) + " s", getName());
  std::this_thread::sleep_for(std::chrono::milliseconds(int(in_delay * 1000)));

  std::string result = in_results.at(count);

  TEMOTO_PRINT_OF("triggering a result " + std::to_string(count + 1) + " out of " +
    std::to_string(in_results.size()) + ": " + in_results.at(count), getName());

  count++;

  /*
   * Trigger the result
   */
  if (result == "on_true")
  {
    return true;
  }
  else if (result == "on_false")
  {
    return false;
  }
  else if (result == "on_error")
  {
    throw std::runtime_error("Deliberate error generated by '" + getName() + "'");
  }
  else
  {
    throw std::runtime_error("Unrecognized input '" + result + "'");
  }
}

void onPause()
{
  TEMOTO_PRINT_OF("Pausing", getName());
}

void onResume()
{
  TEMOTO_PRINT_OF("Continuing", getName());
}

void onStop()
{
  TEMOTO_PRINT_OF("Stopping", getName());
  stop = true;
  cv.notify_all();
}

~TaTriggerResultMulti()
{
}

private:

std::vector<std::string> in_results;
double in_delay;
unsigned int count = 0;
std::condition_variable cv;
std::mutex m;
bool stop = false;

}; // TaTriggerResultMulti class

boost::shared_ptr<ActionBase> factory()
{
    return boost::shared_ptr<TaTriggerResultMulti>(new TaTriggerResultMulti());
}

BOOST_DLL_ALIAS(factory, TaTriggerResultMulti)
